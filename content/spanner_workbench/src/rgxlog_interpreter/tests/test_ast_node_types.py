# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../../nbs/unit_tests/24_test_ast_node_types.ipynb.

# %% auto 0
__all__ = ['test_ast_node_types_sanity']

# %% ../../../../nbs/unit_tests/24_test_ast_node_types.ipynb 1
import pytest
from ..src.rgxlog.engine.datatypes.primitive_types import DataTypes, DataTypeMapping, Span
from ..src.rgxlog.engine.datatypes.ast_node_types import RelationDeclaration, AddFact, RemoveFact, Assignment, Query, IERelation, Relation, get_term_list_string

# %% ../../../../nbs/unit_tests/24_test_ast_node_types.ipynb 2
def test_ast_node_types_sanity() -> None:
    # Test different lengths of term_list and type_list
    term_list = ['X','Y',3]
    type_list = [DataTypes.free_var_name,DataTypes.free_var_name]
    with pytest.raises(Exception) as ex_info:
        term_list_str = get_term_list_string(term_list, type_list)
    
    # Test declaring Relations
    Relation("parents", ['X', 'Y'], [DataTypes.free_var_name, DataTypes.free_var_name])
    Relation("parents", ['Jack', 'Michael'], [DataTypes.string, DataTypes.string])
    Relation("parents", [2, 2], [DataTypes.integer, DataTypes.integer])
    Relation("parents", ['[3,5)', 'Y'], [DataTypes.span, DataTypes.free_var_name])

    # Test declaring illegal Relations
    with pytest.raises(Exception):
        Relation("parents", ['X', 'Y'], [DataTypes.free_var_name])

    with pytest.raises(Exception):
        Relation("parents", ['X'], [DataTypes.free_var_name, DataTypes.integer])

    # Test declaring a class RelationDeclaration with a DataTypes.free_var_name as a member of the type_list
    rel_decl = RelationDeclaration("test", [DataTypes.integer, DataTypes.free_var_name])
    str(rel_decl)
